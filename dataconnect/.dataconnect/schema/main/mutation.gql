extend type Mutation {
  """
  ✨ Insert a single `Exercise` into the table and return its key. Columns not specified in `data` will receive defaults (e.g. `null`).
  """
  exercise_insert(
    """
    Data object to insert into the table.
    """
    data: Exercise_Data!
  ): Exercise_KeyOutput! @fdc_generated(from: "Exercise", purpose: INSERT_SINGLE)
  """
  ✨ Insert a single `ExerciseSet` into the table and return its key. Columns not specified in `data` will receive defaults (e.g. `null`).
  """
  exerciseSet_insert(
    """
    Data object to insert into the table.
    """
    data: ExerciseSet_Data!
  ): ExerciseSet_KeyOutput! @fdc_generated(from: "ExerciseSet", purpose: INSERT_SINGLE)
  """
  ✨ Insert a single `User` into the table and return its key. Columns not specified in `data` will receive defaults (e.g. `null`).
  """
  user_insert(
    """
    Data object to insert into the table.
    """
    data: User_Data!
  ): User_KeyOutput! @fdc_generated(from: "User", purpose: INSERT_SINGLE)
  """
  ✨ Insert a single `Workout` into the table and return its key. Columns not specified in `data` will receive defaults (e.g. `null`).
  """
  workout_insert(
    """
    Data object to insert into the table.
    """
    data: Workout_Data!
  ): Workout_KeyOutput! @fdc_generated(from: "Workout", purpose: INSERT_SINGLE)
  """
  ✨ Insert `Exercise` objects into the table and return their keys. Columns not specified in `data` will receive defaults (e.g. `null`).
  """
  exercise_insertMany(
    """
    List of data objects to insert into the table.
    """
    data: [Exercise_Data!]!
  ): [Exercise_KeyOutput!]! @fdc_generated(from: "Exercise", purpose: INSERT_MULTIPLE)
  """
  ✨ Insert `ExerciseSet` objects into the table and return their keys. Columns not specified in `data` will receive defaults (e.g. `null`).
  """
  exerciseSet_insertMany(
    """
    List of data objects to insert into the table.
    """
    data: [ExerciseSet_Data!]!
  ): [ExerciseSet_KeyOutput!]! @fdc_generated(from: "ExerciseSet", purpose: INSERT_MULTIPLE)
  """
  ✨ Insert `User` objects into the table and return their keys. Columns not specified in `data` will receive defaults (e.g. `null`).
  """
  user_insertMany(
    """
    List of data objects to insert into the table.
    """
    data: [User_Data!]!
  ): [User_KeyOutput!]! @fdc_generated(from: "User", purpose: INSERT_MULTIPLE)
  """
  ✨ Insert `Workout` objects into the table and return their keys. Columns not specified in `data` will receive defaults (e.g. `null`).
  """
  workout_insertMany(
    """
    List of data objects to insert into the table.
    """
    data: [Workout_Data!]!
  ): [Workout_KeyOutput!]! @fdc_generated(from: "Workout", purpose: INSERT_MULTIPLE)
  """
  ✨ Insert or update a single `Exercise` into the table, based on the primary key. Returns the key of the newly inserted or existing updated `Exercise`.
  """
  exercise_upsert(
    """
    Data object to insert or update if it already exists.
    """
    data: Exercise_Data!
  ): Exercise_KeyOutput! @fdc_generated(from: "Exercise", purpose: UPSERT_SINGLE)
  """
  ✨ Insert or update a single `ExerciseSet` into the table, based on the primary key. Returns the key of the newly inserted or existing updated `ExerciseSet`.
  """
  exerciseSet_upsert(
    """
    Data object to insert or update if it already exists.
    """
    data: ExerciseSet_Data!
  ): ExerciseSet_KeyOutput! @fdc_generated(from: "ExerciseSet", purpose: UPSERT_SINGLE)
  """
  ✨ Insert or update a single `User` into the table, based on the primary key. Returns the key of the newly inserted or existing updated `User`.
  """
  user_upsert(
    """
    Data object to insert or update if it already exists.
    """
    data: User_Data!
  ): User_KeyOutput! @fdc_generated(from: "User", purpose: UPSERT_SINGLE)
  """
  ✨ Insert or update a single `Workout` into the table, based on the primary key. Returns the key of the newly inserted or existing updated `Workout`.
  """
  workout_upsert(
    """
    Data object to insert or update if it already exists.
    """
    data: Workout_Data!
  ): Workout_KeyOutput! @fdc_generated(from: "Workout", purpose: UPSERT_SINGLE)
  """
  ✨ Insert or update `Exercise` objects into the table, based on the primary key. Returns the key of the newly inserted or existing updated `Exercise`.
  """
  exercise_upsertMany(
    """
    List of data objects to insert or update if it already exists.
    """
    data: [Exercise_Data!]!
  ): [Exercise_KeyOutput!]! @fdc_generated(from: "Exercise", purpose: UPSERT_MULTIPLE)
  """
  ✨ Insert or update `ExerciseSet` objects into the table, based on the primary key. Returns the key of the newly inserted or existing updated `ExerciseSet`.
  """
  exerciseSet_upsertMany(
    """
    List of data objects to insert or update if it already exists.
    """
    data: [ExerciseSet_Data!]!
  ): [ExerciseSet_KeyOutput!]! @fdc_generated(from: "ExerciseSet", purpose: UPSERT_MULTIPLE)
  """
  ✨ Insert or update `User` objects into the table, based on the primary key. Returns the key of the newly inserted or existing updated `User`.
  """
  user_upsertMany(
    """
    List of data objects to insert or update if it already exists.
    """
    data: [User_Data!]!
  ): [User_KeyOutput!]! @fdc_generated(from: "User", purpose: UPSERT_MULTIPLE)
  """
  ✨ Insert or update `Workout` objects into the table, based on the primary key. Returns the key of the newly inserted or existing updated `Workout`.
  """
  workout_upsertMany(
    """
    List of data objects to insert or update if it already exists.
    """
    data: [Workout_Data!]!
  ): [Workout_KeyOutput!]! @fdc_generated(from: "Workout", purpose: UPSERT_MULTIPLE)
  """
  ✨ Update a single `Exercise` based on `id`, `key` or `first`, setting columns specified in `data`. Returns the key of the updated `Exercise` or `null` if not found.
  """
  exercise_update(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: Exercise_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: Exercise_FirstRow

    """
    Data object containing fields to be updated.
    """
    data: Exercise_Data!
  ): Exercise_KeyOutput @fdc_generated(from: "Exercise", purpose: UPDATE_SINGLE)
  """
  ✨ Update a single `ExerciseSet` based on `id`, `key` or `first`, setting columns specified in `data`. Returns the key of the updated `ExerciseSet` or `null` if not found.
  """
  exerciseSet_update(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: ExerciseSet_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: ExerciseSet_FirstRow

    """
    Data object containing fields to be updated.
    """
    data: ExerciseSet_Data!
  ): ExerciseSet_KeyOutput @fdc_generated(from: "ExerciseSet", purpose: UPDATE_SINGLE)
  """
  ✨ Update a single `User` based on `id`, `key` or `first`, setting columns specified in `data`. Returns the key of the updated `User` or `null` if not found.
  """
  user_update(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: User_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: User_FirstRow

    """
    Data object containing fields to be updated.
    """
    data: User_Data!
  ): User_KeyOutput @fdc_generated(from: "User", purpose: UPDATE_SINGLE)
  """
  ✨ Update a single `Workout` based on `id`, `key` or `first`, setting columns specified in `data`. Returns the key of the updated `Workout` or `null` if not found.
  """
  workout_update(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: Workout_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: Workout_FirstRow

    """
    Data object containing fields to be updated.
    """
    data: Workout_Data!
  ): Workout_KeyOutput @fdc_generated(from: "Workout", purpose: UPDATE_SINGLE)
  """
  ✨ Update `Exercise` objects matching `where` conditions (or `all`, if true) according to `data`. Returns the number of rows updated.
  """
  exercise_updateMany(
    """
    Filter condition to specify which rows to update.
    """
    where: Exercise_Filter

    """
    Set to true to update all rows.
    """
    all: Boolean = false

    """
    Data object containing fields to update.
    """
    data: Exercise_Data!
  ): Int! @fdc_generated(from: "Exercise", purpose: UPDATE_MULTIPLE)
  """
  ✨ Update `ExerciseSet` objects matching `where` conditions (or `all`, if true) according to `data`. Returns the number of rows updated.
  """
  exerciseSet_updateMany(
    """
    Filter condition to specify which rows to update.
    """
    where: ExerciseSet_Filter

    """
    Set to true to update all rows.
    """
    all: Boolean = false

    """
    Data object containing fields to update.
    """
    data: ExerciseSet_Data!
  ): Int! @fdc_generated(from: "ExerciseSet", purpose: UPDATE_MULTIPLE)
  """
  ✨ Update `User` objects matching `where` conditions (or `all`, if true) according to `data`. Returns the number of rows updated.
  """
  user_updateMany(
    """
    Filter condition to specify which rows to update.
    """
    where: User_Filter

    """
    Set to true to update all rows.
    """
    all: Boolean = false

    """
    Data object containing fields to update.
    """
    data: User_Data!
  ): Int! @fdc_generated(from: "User", purpose: UPDATE_MULTIPLE)
  """
  ✨ Update `Workout` objects matching `where` conditions (or `all`, if true) according to `data`. Returns the number of rows updated.
  """
  workout_updateMany(
    """
    Filter condition to specify which rows to update.
    """
    where: Workout_Filter

    """
    Set to true to update all rows.
    """
    all: Boolean = false

    """
    Data object containing fields to update.
    """
    data: Workout_Data!
  ): Int! @fdc_generated(from: "Workout", purpose: UPDATE_MULTIPLE)
  """
  ✨ Delete a single `Exercise` based on `id`, `key` or `first` and return its key (or `null` if not found).
  """
  exercise_delete(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: Exercise_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: Exercise_FirstRow
  ): Exercise_KeyOutput @fdc_generated(from: "Exercise", purpose: DELETE_SINGLE)
  """
  ✨ Delete a single `ExerciseSet` based on `id`, `key` or `first` and return its key (or `null` if not found).
  """
  exerciseSet_delete(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: ExerciseSet_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: ExerciseSet_FirstRow
  ): ExerciseSet_KeyOutput @fdc_generated(from: "ExerciseSet", purpose: DELETE_SINGLE)
  """
  ✨ Delete a single `User` based on `id`, `key` or `first` and return its key (or `null` if not found).
  """
  user_delete(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: User_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: User_FirstRow
  ): User_KeyOutput @fdc_generated(from: "User", purpose: DELETE_SINGLE)
  """
  ✨ Delete a single `Workout` based on `id`, `key` or `first` and return its key (or `null` if not found).
  """
  workout_delete(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: Workout_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: Workout_FirstRow
  ): Workout_KeyOutput @fdc_generated(from: "Workout", purpose: DELETE_SINGLE)
  """
  ✨ Delete `Exercise` objects matching `where` conditions (or `all`, if true). Returns the number of rows deleted.
  """
  exercise_deleteMany(
    """
    Filter condition to specify which rows to delete.
    """
    where: Exercise_Filter

    """
    Set to true to delete all rows.
    """
    all: Boolean = false
  ): Int! @fdc_generated(from: "Exercise", purpose: DELETE_MULTIPLE)
  """
  ✨ Delete `ExerciseSet` objects matching `where` conditions (or `all`, if true). Returns the number of rows deleted.
  """
  exerciseSet_deleteMany(
    """
    Filter condition to specify which rows to delete.
    """
    where: ExerciseSet_Filter

    """
    Set to true to delete all rows.
    """
    all: Boolean = false
  ): Int! @fdc_generated(from: "ExerciseSet", purpose: DELETE_MULTIPLE)
  """
  ✨ Delete `User` objects matching `where` conditions (or `all`, if true). Returns the number of rows deleted.
  """
  user_deleteMany(
    """
    Filter condition to specify which rows to delete.
    """
    where: User_Filter

    """
    Set to true to delete all rows.
    """
    all: Boolean = false
  ): Int! @fdc_generated(from: "User", purpose: DELETE_MULTIPLE)
  """
  ✨ Delete `Workout` objects matching `where` conditions (or `all`, if true). Returns the number of rows deleted.
  """
  workout_deleteMany(
    """
    Filter condition to specify which rows to delete.
    """
    where: Workout_Filter

    """
    Set to true to delete all rows.
    """
    all: Boolean = false
  ): Int! @fdc_generated(from: "Workout", purpose: DELETE_MULTIPLE)
}
