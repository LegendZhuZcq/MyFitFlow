mutation AddExerciseSet($exerciseId: UUID!, $completed: Boolean!, $measurement: String!, $reps: Int!) @auth(level: USER) {
  exerciseSet_insert(data: {exerciseId: $exerciseId, completed: $completed, measurement: $measurement, reps: $reps})
}

query ListWorkoutsByUser($userId: UUID!) @auth(level: USER) {
  workouts(where: {userId: {eq: $userId}}) {
    id
    name
    date
    completed
  }
}

mutation UpdateWorkoutCompletion($workoutId: UUID!, $completed: Boolean!) @auth(level: USER) {
  workout_update(key: {id: $workoutId}, data: {completed: $completed})
}

query GetExercisesForWorkout($workoutId: UUID!) @auth(level: USER) {
  exercises(where: {workoutId: {eq: $workoutId}}) {
    id
    name
    youtubeLink
    exerciseSets_on_exercise {
      id
      completed
      measurement
      reps
    }
  }
}

mutation CreateWorkout($userId: UUID!, $name: String!, $date: Date!) @auth(level: USER) {
  workout_insert(data: {userId: $userId, name: $name, date: $date, completed: false})
}

mutation DeleteExerciseSet($id: UUID!) @auth(level: USER) {
  exerciseSet_delete(key: {id: $id})
}

query ListExercisesByUser @auth(level: USER) {
  exercises {
    id
    name
    youtubeLink
    workout {
      id
      name
      date
      completed
      user {
        id
        displayName
        email
        photoUrl
      }
    }
  }
}